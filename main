def main():
  word = "abcabcbb"
  print(f"The word to be used is: {word}")
  l_substring, l_substring_length = longest_substring(word)
  print(f"The longest substring without repeating characters of this word is: {l_substring}")
  print(f"Length of the longest substring: {l_substring_length}\n")
  
  word_2 = "pwwkew"
  print(f"Let's try another word. The new word to be used is: {word_2}")
  l_substring_2, l_substring_2_length = longest_substring(word_2)
  print(f"The longest substring without repeating characters of this word is: {l_substring_2}")
  print(f"Length of the longest substring: {l_substring_2_length}\n")
  
  word_3 = "bbbbb"
  print(f"One more time. The new word to be used is: {word_3}")
  l_substring_3, l_substring_3_length = longest_substring(word_3)
  print(f"The longest substring without repeating characters of this word is: {l_substring_3}")
  print(f"Length of the longest substring: {l_substring_3_length}\n")

def longest_substring(word: str) -> tuple[str, int]:
  if not word:
    return "", 0
  start, end, max_length, max_start, max_end = 0, 0, 0, 0, 0
  unique_chars = set()

  # The while loop iterates through the characters of word, keeps track of unique characters encountered so far, and updates the longest substring without repeating characters and its length (max_start, max_end, and max_length).
  while end < len(word):
    if word[end] not in unique_chars:
        unique_chars.add(word[end])
        end += 1
        if len(unique_chars) > max_length:
          max_length = len(unique_chars)
          max_start = start
          max_end = end
    else:
      unique_chars.remove(word[start])
      start += 1
      
  l_substring = word[max_start:max_end]
  return l_substring, max_length

main()
